#!/usr/bin/env python

"""
Add a given audio file (or all audio files in a directory) to a modal database.

Will overwrite any existing audio file in the database with the same name.

For each audio file, the script will also add any metadata from a file in
the same directory called file_name.yaml. If no such file exists, then the
audio file will still be added, with default values for the standard
modal metadata fields.
"""
import sys
import os
import glob
import h5py
import yaml
from scipy.io.wavfile import read
import numpy as np


def _add_file(audio_db, file_path):
    # read the audio file
    sampling_rate, audio = read(file_path)
    audio = np.asarray(audio, np.double) / 32768.0

    # default metadata
    metadata = {
        'sampling_rate': sampling_rate,
        'onsets': [],
        'type': '',
        'texture': '',
        'comments': ''
    }

    # look for metadata file
    metadata_path = file_path + '.yaml'
    if os.path.exists(metadata_path):
        with open(metadata_path, 'r') as f:
            metadata = yaml.load(f)

    # save to hdf5 database
    file_name = os.path.split(file_path)[1]
    audio_db[file_name] = audio
    for k, v in metadata.iteritems():
        audio_db[file_name].attrs[k] = v


if __name__ == '__main__':
    usage = 'Usage: modalimport <HDF5 file> <audio file or directory>'
    if len(sys.argv) != 3:
        print usage
        sys.exit(1)

    audio_db_path = sys.argv[1]
    to_add = sys.argv[2]
    audio_db = None

    try:
        audio_db = h5py.File(audio_db_path, 'w')

        if os.path.isfile(to_add):
            _add_file(audio_db, to_add)
        elif os.path.isdir(to_add):
            for file_path in glob.glob(os.path.join(to_add, '*.wav')):
                _add_file(audio_db, file_path)
        else:
            print 'Error: can not add %s' % to_add
            sys.exit(2)
    finally:
        if audio_db:
            audio_db.close()
